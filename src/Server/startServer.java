/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Server;

import common.Item;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Dulan
 */
public class startServer extends javax.swing.JFrame {

    /**
     * Creates new form startServer
     */
    static ServerSocket serverSocket;
    static Socket connectionSocket;
    static ObjectOutputStream toTheClient;
    static ObjectInputStream fromTheClient;

    public startServer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 153, 153));

        jPanel1.setForeground(new java.awt.Color(255, 153, 153));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 338, 90));

        jButton1.setText("Start Server");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 166, 38));

        jButton2.setText("Stop Server");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 160, 166, 38));

        jLabel2.setBackground(new java.awt.Color(255, 153, 153));
        jLabel2.setForeground(new java.awt.Color(255, 153, 153));
        jLabel2.setOpaque(true);
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -1, 338, 240));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            serverSocket = new ServerSocket(4000);
            JOptionPane.showMessageDialog(this, "Server is Started...");
            System.out.println("ser OK");
            jLabel1.setText("Server is Starting...");
            while (true) {
                connectionSocket = serverSocket.accept();
                System.out.println("Client " + connectionSocket.getInetAddress() + "is Connected");
                ArrayList<Item> allItems = connectWithDatabase();

                toTheClient = new ObjectOutputStream(connectionSocket.getOutputStream());
                toTheClient.writeObject(allItems);

                fromTheClient = new ObjectInputStream(connectionSocket.getInputStream());
                ArrayList<Item> modifyItems = null;
                try {
                    modifyItems = (ArrayList<Item>) fromTheClient.readObject();
                    modifyTable(modifyItems);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(startServer.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(startServer.class.getName()).log(Level.SEVERE, null, ex);
                }
                for (Item modifyItem : modifyItems) {
                    System.out.println(modifyItem.getId());
                }

            }
        } catch (IOException ex) {
            Logger.getLogger(startServer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            connectionSocket.close();
            serverSocket.close();
        } catch (IOException ex) {
            Logger.getLogger(startServer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(startServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(startServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(startServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(startServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new startServer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    private ArrayList<Item> connectWithDatabase() {
        ArrayList<Item> allItems = new ArrayList<>();
        try {
            String sql = "Select * from itemdb";
            Connection connection = null;
            try {
                connection = DBConnection.getDBConnection().getConnection();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(startServer.class.getName()).log(Level.SEVERE, null, ex);
            }
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery(sql);

            while (resultSet.next()) {
                allItems.add(new Item(resultSet.getString("itemId"), resultSet.getString("name"), resultSet.getInt("rate"), resultSet.getDouble("price"), resultSet.getInt("availableQty")));
            }
            for (Item allAccount : allItems) {
                System.out.println(allAccount.getId());
            }

        } catch (SQLException ex) {
            Logger.getLogger(startServer.class.getName()).log(Level.SEVERE, null, ex);
        }
        return allItems;
    }

    private void modifyTable(ArrayList<Item> modifyItems) throws ClassNotFoundException, SQLException, IOException {
        for (Item modifyItem : modifyItems) {

            String itemID = modifyItem.getId();
            System.out.println(itemID);
            int itmQty = modifyItem.getAvailableQty();
            String sql = "Select availableQty from itemdb where itemId= '" + itemID + "'";
            Connection connection = null;

            connection = DBConnection.getDBConnection().getConnection();
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery(sql);
            int oldQty = 0;
            if (resultSet.next()) {
                oldQty = resultSet.getInt("availableQty");
            }
            System.out.println(oldQty);
            int newQty = oldQty - itmQty;

            sql = "Update itemdb set availableQty='" + newQty + "' where itemId= '" + itemID + "'";
            connection = DBConnection.getDBConnection().getConnection();
            statement = connection.createStatement();
            int addOrNot = statement.executeUpdate(sql);

            ArrayList<Item> allItems = connectWithDatabase();

            toTheClient = new ObjectOutputStream(connectionSocket.getOutputStream());
            toTheClient.writeObject(allItems);
//                Connection connection = DBConnection.getDBConnection().getConnection();
//        Statement statement = connection.createStatement();
//        int check = statement.executeUpdate(sql);
        }
    }

}
